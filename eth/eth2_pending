#!/usr/bin/env python3

#
# Python 3.x required
#

#
# curl https://raw.githubusercontent.com/WALL-E/static/master/eth/eth2_pending | python3
#
# wget https://raw.githubusercontent.com/WALL-E/static/master/eth/eth2_pending -O eth2_pending
#
#
# Env:
#
#    export ETH2_BEACON_ENDPOINT=https://ID:SECRET@eth2-beacon-mainnet.infura.io
#


import datetime
import math
import os
import pathlib
import pickle
import random
import sys
import time

import requests


SECONDS_PER_SLOT = 12;
SLOTS_PER_EPOCH = 36;

ETH2_BEACON_ENDPOINT = os.getenv("ETH2_BEACON_ENDPOINT") or "http://127.0.0.1:5052"
CACHE_FILE = "/tmp/genesis_time.eth2"


def date_format(time) -> str:
    return datetime.datetime.fromtimestamp(time).strftime("%Y-%m-%d %H:%M:%S")


def main() -> int:
    path = pathlib.Path(CACHE_FILE)
    if not path.exists():
        r = requests.get(ETH2_BEACON_ENDPOINT + "/eth/v1/beacon/genesis")
        body = r.json()
        genesis_time = body["data"]["genesis_time"]
        f = open(CACHE_FILE, 'wb')
        pickle.dump(genesis_time, f)
        f.close()

    f = open(CACHE_FILE, 'rb')
    genesis_time = pickle.load(f)
    f.close()

    now = time.time()
    epoch = math.floor((now - float(genesis_time)) / (SECONDS_PER_SLOT * SLOTS_PER_EPOCH))
    slot = math.floor((now - float(genesis_time)) / SECONDS_PER_SLOT )

    print()
    print("ETH2_BEACON_ENDPOINT: ".ljust(36), ETH2_BEACON_ENDPOINT)
    print("Cache_Create_Timestamp: ".ljust(36), date_format(os.path.getctime(CACHE_FILE)), "(%s)" % (CACHE_FILE,))

    print()
    print("Genesis_Time: ".ljust(36), date_format(int(genesis_time)))
    print("Now: ".ljust(36), date_format(int(now)))

    print()
    print("Epoch: ".ljust(36), epoch)
    print("Slot: ".ljust(36), slot)


    r = requests.get(ETH2_BEACON_ENDPOINT + "/eth/v1/beacon/blocks/%s" % (slot,))
    body = r.json()
    state_root = body["data"]["message"]["state_root"]

    r = requests.get(ETH2_BEACON_ENDPOINT + "/eth/v1/beacon/states/%s/validators?status=pending_queued" % (state_root,))
    body = r.json()
    pending_queued = [ i["index"] for i in body["data"] ]

    print()
    print("PendingQueued count:".ljust(36), len(pending_queued))
    if len(pending_queued) > 2:
        pending_queued = random.sample(pending_queued, 3)
    print("PendingQueued index(random):".ljust(36), pending_queued)

    r = requests.get(ETH2_BEACON_ENDPOINT + "/eth/v1/beacon/states/%s/validators?status=pending_initialized" % (state_root,))
    body = r.json()
    pending_initialized = [ i["index"] for i in body["data"] ]

    print()
    print("PendingInitialized count:".ljust(36), len(pending_initialized))
    if len(pending_initialized) > 2:
        pending_initialized = random.sample(pending_initialized, 3)
    print("PendingInitialized index(random):".ljust(36), pending_initialized)


    return 0

if __name__ == '__main__':
    sys.exit(main())
